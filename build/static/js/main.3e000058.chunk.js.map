{"version":3,"sources":["App.js","serviceWorker.js","index.js","images/lander.png"],"names":["App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","date","tempHi","tempLo","windspeed","season","WD","_this2","fetch","then","res","json","i","length","windObj","console","log","setState","First_UTC","slice","AT","mx","mn","Season","HWS","av","keys","compass_point","_this3","windOb","react_default","a","createElement","className","id","src","lander","alt","Math","round","toUpperCase","Button","onClick","getPrev","color","getInfo","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister","module","exports","__webpack_require__","p"],"mappings":"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","file":"static/js/main.3e000058.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './App.css';\nimport lander from './images/lander.png';\nimport { Button } from 'reactstrap';\n\nclass App extends Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      date: '',\n      tempHi: '',\n      tempLo: '',\n      windspeed: '',\n      season: '',\n      WD: ''\n    };\n   \n  }\n  \n\n  //Pulling data from the InSight lander and setting the corresponding state to gathered information.\n  getInfo() {\n    fetch('https://mars.nasa.gov/rss/api/?feed=weather&category=insight&feedtype=json&ver=1.0')\n      .then(res => res.json())\n      .then(res => {\n        //Creating varible to \"point\" to the latest available data.\n        var i = res[\"sol_keys\"][res[\"sol_keys\"].length - 1];\n        //Another useful variable to help explore the array of 'wind direction'.\n        const windObj = res[i].WD;\n\n        console.log(res);\n        console.log('Button Test' + (i - 1));\n\n        console.log(`Data from Sol Day: ` + i);\n        //Setting state for each parameter to be displayed.\n        this.setState({ date: res[i].First_UTC.slice(5, 10) })\n        this.setState({ tempHi: res[i].AT.mx });\n        this.setState({ tempLo: res[i].AT.mn });\n        this.setState({ season: res[i].Season });\n        this.setState({ windspeed: res[i].HWS.av });\n        this.setState({ WD: res[i].WD[Object.keys(windObj)[7]].compass_point })\n      \n        \n    });\n  }\n\n\n\n  getPrev() {\n    fetch('https://mars.nasa.gov/rss/api/?feed=weather&category=insight&feedtype=json&ver=1.0')\n      .then(res => res.json())\n      .then(res => {\n        //Creating varible to \"point\" to the latest available data.\n        var i = res[\"sol_keys\"][res[\"sol_keys\"].length - 2];\n        \n        \n        \n        //Another useful variable to help explore the array of 'wind direction'.\n        const windOb = res[i].WD;\n\n        console.log(res);\n\n        console.log(`Data from Sol Day: ` + i);\n        //Setting state for each parameter to be displayed.\n        this.setState({ date: res[i].First_UTC.slice(5, 10) })\n        this.setState({ tempHi: res[i].AT.mx });\n        this.setState({ tempLo: res[i].AT.mn });\n        this.setState({ season: res[i].Season });\n        this.setState({ windspeed: res[i].HWS.av });\n        this.setState({ WD: res[i].WD[Object.keys(windOb)[7]].compass_point })\n      \n        \n    });\n  }\n\n  \n  render() {\n    return (\n\n\n      <div className=\"App\">\n\n        <header className=\"App-header\">\n          <h1>Mars Weather Report</h1>\n          <img id=\"insight\" src={lander} alt=\"Mars InSight Lander\" />\n        </header>\n\n        <div className=\"content\">\n          <div className=\"Info-container\">\n            <h1>Last Updated:</h1>\n            <h3>{this.state.date}</h3>\n            <h1>Temperature:</h1>\n            <h3>High: {Math.round(this.state.tempHi * 9 / 5 + 32)} °F</h3>\n            <h3>Low: {Math.round(this.state.tempLo * 9 / 5 + 32)} °F</h3>\n            <h1>Wind Speed:</h1>\n            <h3>{this.state.WD}  {Math.round(this.state.windspeed)} mph </h3>\n            <h1>Season:</h1>\n            <h3> {this.state.season.toUpperCase()}</h3>\n            <Button onClick={this.getPrev()}>Prev.</Button>\n            <Button color=\"success\" onClick={this.getInfo()}>Current</Button>\n\n\n          </div>\n          \n        </div>\n        <div className=\"foot-container\">\n        <footer>\n          <p>Created by Nathan Spring 2019</p>\n        </footer>\n        </div>\n                </div>\n\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/lander.e925438b.png\";"],"sourceRoot":""}